

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  password         String
  diaChi           String?
  role             String?   @default("user")
  avatar           String?   @default("https://i0.wp.com/www.repol.copl.ulaval.ca/wp-content/uploads/2019/01/default-user-icon.jpg?ssl=1")
  anhChanDung      String?
  isEmailVerified  Boolean   @default(false)
  otp              String?
  luot             Int?      @default(0)
  luotChuyenNghiep Int?      @default(0)
  luotVip          Int?      @default(0)
  directMessages         DirectMessage[]
  conversationsInitiated Conversation[]    @relation("userOne")
  conversationsReceived  Conversation[]    @relation("userTwo")
    seenMessages           SeenMessage[]
  duyetDoiTac      String?
  BaiViets         BaiViet[]
}

model LoaiBDS {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  loaiHinhs LoaiHinh[]  // One-to-many relationship with LoaiHinh
  // Remove direct relationship with ChiTietBDS
}
model BaiViet {
  id        Int      @id @default(autoincrement())
  tieuDe    String

  nhan      String
  trangThai String   @default("Chờ duyệt")
  ngayDang  DateTime @default(now())
  userId    Int
 
  user      User     @relation(fields: [userId], references: [id])
  gia               Float
  isChothue         Boolean          @default(false)
  diaChi            String
  dienTich          Float            
  chieuDai          Float
  chieuRong         Float
  hinhAnhSanPham    String?          @db.LongText
  hinhAnhGiayTo     String?          @db.LongText
  video             String?          @db.LongText
  tinhTrangPhapLy  String?
  loaiHinhId Int
  loaiHinh           LoaiHinh          @relation(fields: [loaiHinhId], references: [id])     
  hinhAnhThietKe    String?
  soPhongNgu        Int?
  soPhongTam        Int?
  soTang            Int?
  tinhTrangNoiThat String?
  danhSachTienNghi  String?    @db.LongText
  hoanThanh         DateTime?
  suaChuaLanCuoi    DateTime?
  huongBanCong      String?
  huongCuaChinh     String?
  dienTichGarage   Float?
  dienTichHoBoi    Float?
  huongDat  String?
  huongVanphong    String?


  @@index([loaiHinhId])
  @@index([userId])
}
model LoaiHinh {
id       Int       @id @default(autoincrement())
  name     String   
  loaiBDSId Int
  loaiBDS           LoaiBDS          @relation(fields: [loaiBDSId], references: [id])
  baiViets BaiViet[]


  @@index([loaiBDSId])

}

model Conversation {
  id             String          @id @default(uuid())
  userOneId      Int
  userTwoId      Int
  lastMessageAt  DateTime        @default(now())
  lastMessage    String?
  userOne        User            @relation("userOne", fields: [userOneId], references: [id], onDelete: Cascade)
  userTwo        User            @relation("userTwo", fields: [userTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([userOneId, userTwoId])
  @@index([userTwoId])
}

model DirectMessage {
  id             String        @id @default(uuid())
  content        String        @db.Text
  fileUrl        String?       @db.Text
  userId         Int
  conversationId String
  deleted        Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  seenBy         SeenMessage[]

  @@index([userId])
  @@index([conversationId])
}

model SeenMessage {
  id              String        @id
  userId          Int
  directMessageId String
  seenAt          DateTime?
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  directMessage   DirectMessage @relation(fields: [directMessageId], references: [id], onDelete: Cascade)

  @@unique([userId, directMessageId])
  @@index([directMessageId])
}

